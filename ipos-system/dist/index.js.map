{"version":3,"file":"index.js","sources":["../node_modules/lit-html/lit-html.js","../src/lib/define-property.js","../src/program.js","../src/window-manager.js","../src/index.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nexport const templateCaches = new Map();\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html');\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg');\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, partCallback = defaultPartCallback) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.partCallback = partCallback;\n    }\n    /**\n     * Returns a string of HTML used to create a <template> element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isTextBinding = true;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            html += s;\n            // We're in a text position if the previous string closed its tags.\n            // If it doesn't have any tags, then we use the previous text position\n            // state.\n            const closing = findTagClose(s);\n            isTextBinding = closing > -1 ? closing < s.length : isTextBinding;\n            html += isTextBinding ? nodeMarker : marker;\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an <svg> tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the <svg> tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function defaultTemplateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        template = new Template(result, result.getTemplateElement());\n        templateCache.set(result.strings, template);\n    }\n    return template;\n}\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param templateFactory a function to create a Template or retreive one from\n *     cache.\n */\nexport function render(result, container, templateFactory = defaultTemplateFactory) {\n    const template = templateFactory(result);\n    let instance = container.__templateInstance;\n    // Repeat render, just call update()\n    if (instance !== undefined && instance.template === template &&\n        instance._partCallback === result.partCallback) {\n        instance.update(result.values);\n        return;\n    }\n    // First render, create a new TemplateInstance and append it\n    instance =\n        new TemplateInstance(template, result.partCallback, templateFactory);\n    container.__templateInstance = instance;\n    const fragment = instance._clone();\n    instance.update(result.values);\n    removeNodes(container, container.firstChild);\n    container.appendChild(fragment);\n}\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nconst marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-posisitions, not attribute positions,\n * in template.\n */\nconst nodeMarker = `<!--${marker}-->`;\nconst markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst lastAttributeNameRegex = /[ \\x09\\x0a\\x0c\\x0d]([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)[ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*)$/;\n/**\n * Finds the closing index of the last closed HTML tag.\n * This has 3 possible return values:\n *   - `-1`, meaning there is no tag in str.\n *   - `string.length`, meaning the last opened tag is unclosed.\n *   - Some positive number < str.length, meaning the index of the closing '>'.\n */\nfunction findTagClose(str) {\n    const close = str.lastIndexOf('>');\n    const open = str.indexOf('<', close + 1);\n    return open > -1 ? str.length : close;\n}\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport class TemplatePart {\n    constructor(type, index, name, rawName, strings) {\n        this.type = type;\n        this.index = index;\n        this.name = name;\n        this.rawName = rawName;\n        this.strings = strings;\n    }\n}\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const content = this.element.content;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n               NodeFilter.SHOW_TEXT */, null, false);\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        // The actual previous node, accounting for removals: if a node is removed\n        // it will never be the previousNode.\n        let previousNode;\n        // Used to set previousNode at the top of the loop.\n        let currentNode;\n        while (walker.nextNode()) {\n            index++;\n            previousNode = currentNode;\n            const node = currentNode = walker.currentNode;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (!node.hasAttributes()) {\n                    continue;\n                }\n                const attributes = node.attributes;\n                // Per https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                // attributes are not guaranteed to be returned in document order. In\n                // particular, Edge/IE can return them out of order, so we cannot assume\n                // a correspondance between part index and attribute index.\n                let count = 0;\n                for (let i = 0; i < attributes.length; i++) {\n                    if (attributes[i].value.indexOf(marker) >= 0) {\n                        count++;\n                    }\n                }\n                while (count-- > 0) {\n                    // Get the template literal section leading up to the first\n                    // expression in this attribute attribute\n                    const stringForPart = result.strings[partIndex];\n                    // Find the attribute name\n                    const attributeNameInPart = lastAttributeNameRegex.exec(stringForPart)[1];\n                    // Find the corresponding attribute\n                    const attribute = attributes.getNamedItem(attributeNameInPart);\n                    const stringsForAttributeValue = attribute.value.split(markerRegex);\n                    this.parts.push(new TemplatePart('attribute', index, attribute.name, attributeNameInPart, stringsForAttributeValue));\n                    node.removeAttribute(attribute.name);\n                    partIndex += stringsForAttributeValue.length - 1;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const nodeValue = node.nodeValue;\n                if (nodeValue.indexOf(marker) < 0) {\n                    continue;\n                }\n                const parent = node.parentNode;\n                const strings = nodeValue.split(markerRegex);\n                const lastIndex = strings.length - 1;\n                // We have a part for each match found\n                partIndex += lastIndex;\n                // We keep this current node, but reset its content to the last\n                // literal part. We insert new literal nodes before this so that the\n                // tree walker keeps its position correctly.\n                node.textContent = strings[lastIndex];\n                // Generate a new text node for each literal section\n                // These nodes are also used as the markers for node parts\n                for (let i = 0; i < lastIndex; i++) {\n                    parent.insertBefore(document.createTextNode(strings[i]), node);\n                    this.parts.push(new TemplatePart('node', index++));\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */ &&\n                node.nodeValue === marker) {\n                const parent = node.parentNode;\n                // Add a new marker node to be the startNode of the Part if any of the\n                // following are true:\n                //  * We don't have a previousSibling\n                //  * previousSibling is being removed (thus it's not the\n                //    `previousNode`)\n                //  * previousSibling is not a Text node\n                //\n                // TODO(justinfagnani): We should be able to use the previousNode here\n                // as the marker node and reduce the number of extra nodes we add to a\n                // template. See https://github.com/PolymerLabs/lit-html/issues/147\n                const previousSibling = node.previousSibling;\n                if (previousSibling === null || previousSibling !== previousNode ||\n                    previousSibling.nodeType !== Node.TEXT_NODE) {\n                    parent.insertBefore(document.createTextNode(''), node);\n                }\n                else {\n                    index--;\n                }\n                this.parts.push(new TemplatePart('node', index++));\n                nodesToRemove.push(node);\n                // If we don't have a nextSibling add a marker node.\n                // We don't have to check if the next node is going to be removed,\n                // because that node will induce a new marker if so.\n                if (node.nextSibling === null) {\n                    parent.insertBefore(document.createTextNode(''), node);\n                }\n                else {\n                    index--;\n                }\n                currentNode = previousNode;\n                partIndex++;\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\n/**\n * Returns a value ready to be inserted into a Part from a user-provided value.\n *\n * If the user value is a directive, this invokes the directive with the given\n * part. If the value is null, it's converted to undefined to work better\n * with certain DOM APIs, like textContent.\n */\nexport const getValue = (part, value) => {\n    // `null` as the value of a Text node will render the string 'null'\n    // so we convert it to undefined\n    if (isDirective(value)) {\n        value = value(part);\n        return directiveValue;\n    }\n    return value === null ? undefined : value;\n};\nexport const directive = (f) => {\n    f.__litDirective = true;\n    return f;\n};\nconst isDirective = (o) => typeof o === 'function' && o.__litDirective === true;\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const directiveValue = {};\nconst isPrimitiveValue = (value) => value === null ||\n    !(typeof value === 'object' || typeof value === 'function');\nexport class AttributePart {\n    constructor(instance, element, name, strings) {\n        this.instance = instance;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.size = strings.length - 1;\n        this._previousValues = [];\n    }\n    _interpolate(values, startIndex) {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const v = getValue(this, values[startIndex + i]);\n            if (v && v !== directiveValue &&\n                (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                for (const t of v) {\n                    // TODO: we need to recursively call getValue into iterables...\n                    text += t;\n                }\n            }\n            else {\n                text += v;\n            }\n        }\n        return text + strings[l];\n    }\n    _equalToPreviousValues(values, startIndex) {\n        for (let i = startIndex; i < startIndex + this.size; i++) {\n            if (this._previousValues[i] !== values[i] ||\n                !isPrimitiveValue(values[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    setValue(values, startIndex) {\n        if (this._equalToPreviousValues(values, startIndex)) {\n            return;\n        }\n        const s = this.strings;\n        let value;\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n            if (Array.isArray(value)) {\n                value = value.join('');\n            }\n        }\n        else {\n            value = this._interpolate(values, startIndex);\n        }\n        if (value !== directiveValue) {\n            this.element.setAttribute(this.name, value);\n        }\n        this._previousValues = values;\n    }\n}\nexport class NodePart {\n    constructor(instance, startNode, endNode) {\n        this.instance = instance;\n        this.startNode = startNode;\n        this.endNode = endNode;\n        this._previousValue = undefined;\n    }\n    setValue(value) {\n        value = getValue(this, value);\n        if (value === directiveValue) {\n            return;\n        }\n        if (isPrimitiveValue(value)) {\n            // Handle primitive values\n            // If the value didn't change, do nothing\n            if (value === this._previousValue) {\n                return;\n            }\n            this._setText(value);\n        }\n        else if (value instanceof TemplateResult) {\n            this._setTemplateResult(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._setIterable(value);\n        }\n        else if (value instanceof Node) {\n            this._setNode(value);\n        }\n        else if (value.then !== undefined) {\n            this._setPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._setText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _setNode(value) {\n        if (this._previousValue === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this._previousValue = value;\n    }\n    _setText(value) {\n        const node = this.startNode.nextSibling;\n        value = value === undefined ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if _previousValue is\n            // primitive?\n            node.textContent = value;\n        }\n        else {\n            this._setNode(document.createTextNode(value));\n        }\n        this._previousValue = value;\n    }\n    _setTemplateResult(value) {\n        const template = this.instance._getTemplate(value);\n        let instance;\n        if (this._previousValue && this._previousValue.template === template) {\n            instance = this._previousValue;\n        }\n        else {\n            instance = new TemplateInstance(template, this.instance._partCallback, this.instance._getTemplate);\n            this._setNode(instance._clone());\n            this._previousValue = instance;\n        }\n        instance.update(value.values);\n    }\n    _setIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _previousValue is an array, then the previous render was of an\n        // iterable and _previousValue will contain the NodeParts from the previous\n        // render. If _previousValue is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this._previousValue)) {\n            this.clear();\n            this._previousValue = [];\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this._previousValue;\n        let partIndex = 0;\n        for (const item of value) {\n            // Try to reuse an existing part\n            let itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                // If we're creating the first item part, it's startNode should be the\n                // container's startNode\n                let itemStart = this.startNode;\n                // If we're not creating the first part, create a new separator marker\n                // node, and fix up the previous part's endNode to point to it\n                if (partIndex > 0) {\n                    const previousPart = itemParts[partIndex - 1];\n                    itemStart = previousPart.endNode = document.createTextNode('');\n                    this._insert(itemStart);\n                }\n                itemPart = new NodePart(this.instance, itemStart, this.endNode);\n                itemParts.push(itemPart);\n            }\n            itemPart.setValue(item);\n            partIndex++;\n        }\n        if (partIndex === 0) {\n            this.clear();\n            this._previousValue = undefined;\n        }\n        else if (partIndex < itemParts.length) {\n            const lastPart = itemParts[partIndex - 1];\n            // Truncate the parts array so _previousValue reflects the current state\n            itemParts.length = partIndex;\n            this.clear(lastPart.endNode.previousSibling);\n            lastPart.endNode = this.endNode;\n        }\n    }\n    _setPromise(value) {\n        this._previousValue = value;\n        value.then((v) => {\n            if (this._previousValue === value) {\n                this.setValue(v);\n            }\n        });\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\nexport const defaultPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        return new AttributePart(instance, node, templatePart.name, templatePart.strings);\n    }\n    else if (templatePart.type === 'node') {\n        return new NodePart(instance, node, node.nextSibling);\n    }\n    throw new Error(`Unknown part type ${templatePart.type}`);\n};\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, partCallback, getTemplate) {\n        this._parts = [];\n        this.template = template;\n        this._partCallback = partCallback;\n        this._getTemplate = getTemplate;\n    }\n    update(values) {\n        let valueIndex = 0;\n        for (const part of this._parts) {\n            if (part.size === undefined) {\n                part.setValue(values[valueIndex]);\n                valueIndex++;\n            }\n            else {\n                part.setValue(values, valueIndex);\n                valueIndex += part.size;\n            }\n        }\n    }\n    _clone() {\n        const fragment = document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        if (parts.length > 0) {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                   NodeFilter.SHOW_TEXT */, null, false);\n            let index = -1;\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n                while (index < part.index) {\n                    index++;\n                    walker.nextNode();\n                }\n                this._parts.push(this._partCallback(this, part, walker.currentNode));\n            }\n        }\n        return fragment;\n    }\n}\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=lit-html.js.map","export const propertySet = {};\r\n\r\n/**\r\n * Default property descriptor values\r\n * @see https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\r\n */\r\nexport const defaults = (property, get, set) => {\r\n  return {\r\n    value: undefined,\r\n    writable: false,\r\n    configurable: false,\r\n    get: get ? get : value => property || undefined,\r\n    set: set ? set : value => property = value\r\n  }\r\n}\r\n\r\n/**\r\n * definProperty to given object (parent), descriptor is assigned against defaults\r\n *\r\n * @param {object} object The object to define the property on\r\n * @param {string} property Name of the property\r\n * @param {object} descriptor see defaults {@link defaults}\r\n * @example\r\n * definProperty({}, 'name', {get => 'hello'});\r\n */\r\nexport default (object, property, descriptor) => {\r\n  const uid = createKeccakHash(`${name}.${property}`, 'keccak256');\r\n  propertySet[uid] = descriptor.value;\r\n  const defs = defaults(propertySet[uid]);\r\n  Object.definProperty(object, property,  Object.assign(defs, descriptor))\r\n}\r\n","import {html, render} from 'lit-html';\r\nimport defineProperty from './lib/define-property';\r\n\r\nwindow.html = html;\r\n\r\n/**\r\n * @param name Name of the program\r\n * @param renderTarget Target to render on\r\n * @param template lit-html template\r\n */\r\nexport default (name, renderTarget, template) => {\r\n  if (!name) return console.error(`${name ? 'renderTarget' : 'name'} required`);\r\n  const program = {\r\n    name,\r\n    renderTarget,\r\n    defineProperty\r\n  };\r\n  program.definProperty = defineProperty;\r\n  // Dynamic render target so programs can switch from windows, workspace etc\r\n  program.render = params => render(template(params), program.renderTarget);\r\n  return program;\r\n}\r\n","export default () => {\r\n  const template = `\r\n    <style>\r\n      main {\r\n        display: block;\r\n        height: calc(100% - 56px);\r\n        width: 100%;\r\n      }\r\n    </style>\r\n    <main></main>\r\n  `;\r\n  return program('window-manager', document.body, template);\r\n}\r\n","import program from './program';\r\nimport windowManager from './window-manager';\r\n\r\nexport default { program, windowManager };\r\n"],"names":["templateCaches","Map","html","strings","values","TemplateResult","type","partCallback","defaultPartCallback","l","length","isTextBinding","i","s","closing","findTagClose","nodeMarker","marker","template","document","createElement","innerHTML","getHTML","defaultTemplateFactory","result","templateCache","get","undefined","set","Template","getTemplateElement","render","container","templateFactory","instance","__templateInstance","_partCallback","update","TemplateInstance","fragment","_clone","firstChild","appendChild","String","Math","random","slice","markerRegex","RegExp","lastAttributeNameRegex","str","close","lastIndexOf","open","indexOf","TemplatePart","index","name","rawName","element","parts","content","walker","createTreeWalker","partIndex","nodesToRemove","previousNode","currentNode","nextNode","node","nodeType","hasAttributes","attributes","count","value","stringForPart","attributeNameInPart","exec","attribute","getNamedItem","stringsForAttributeValue","split","push","removeAttribute","nodeValue","parent","parentNode","lastIndex","textContent","insertBefore","createTextNode","previousSibling","Node","TEXT_NODE","nextSibling","n","removeChild","getValue","part","isDirective","directiveValue","o","__litDirective","isPrimitiveValue","AttributePart","size","_previousValues","startIndex","text","v","Array","isArray","Symbol","iterator","t","_equalToPreviousValues","join","_interpolate","setAttribute","NodePart","startNode","endNode","_previousValue","_setText","_setTemplateResult","_setIterable","_setNode","then","_setPromise","clear","_insert","_getTemplate","itemParts","item","itemPart","itemStart","previousPart","setValue","lastPart","templatePart","Error","getTemplate","_parts","valueIndex","importNode","removeNodes","propertySet","defaults","property","object","descriptor","uid","createKeccakHash","defs","definProperty","Object","assign","window","renderTarget","console","error","program","defineProperty","params","body","windowManager"],"mappings":"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"}